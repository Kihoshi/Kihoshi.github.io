{"version":3,"sources":["components/officeMap.tsx","components/mainPage.tsx","App.tsx","index.tsx"],"names":["DefaultIcon","Leaflet","icon","Icon","Default","prototype","options","iconUrl","iconRetinaUrl","iconRetina","shadowUrl","iconShadow","Marker","driverIcon","SetViewOnClick","coords","useMap","setView","OfficeMap","timeout","drivers","MapContainer","classsName","center","zoom","scrollWheelZoom","TileLayer","attribution","url","position","length","map","v","i","location","latitude","longitude","marks","defaultLocation","locationName","value","Option","Select","FindTaxi","props","useState","officeLocation","setOfficeLocation","setCoords","driverCount","setDriverCount","spinLoading","setSpinLoading","goToMyLocation","goToNearestOffice","nearestDistance","nearestDistanceValue","distance","origin","destination","lon1","toRadian","lat1","lon2","lat2","deltaLat","deltaLon","a","Math","pow","sin","cos","asin","sqrt","getDistance","degree","PI","getNearByTaxiDriver","x","y","where","axios","get","params","count","then","res","console","log","data","err","Modal","error","title","content","message","catch","useEffect","intervalId","setInterval","clearInterval","foundLocation","_","find","isEmpty","onChangeOfficeLocation","className","gutter","span","offset","defaultValue","style","width","onChange","min","max","e","clearTimeout","setTimeout","spinning","loading","onClick","navigator","geolocation","getCurrentPosition","App","exact","path","component","MainPage","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de76b99c.chunk.js","sourcesContent":["\nimport { MapContainer, TileLayer, useMap, Marker } from \"react-leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport Leaflet from \"leaflet\";\nimport icon from \"leaflet/dist/images/marker-icon.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\nimport iconRetina from \"leaflet/dist/images/marker-icon-2x.png\";\n\nlet DefaultIcon = Leaflet.icon({\n  ...Leaflet.Icon.Default.prototype.options,\n  iconUrl: icon,\n  iconRetinaUrl: iconRetina,\n  shadowUrl: iconShadow\n});\nLeaflet.Marker.prototype.options.icon = DefaultIcon;\n\nvar driverIcon = Leaflet.icon({\n  iconUrl: 'https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|2ecc71&chf=a,s,ee00FFFF',\n});\n\n\nconst zoom = 13\nfunction SetViewOnClick({ coords }) {\n  const map = useMap();\n  map.setView(coords, zoom);\n\n  return null;\n}\n\n\nfunction OfficeMap({ coords, drivers }) {\n  return (\n    <>\n      <MapContainer\n        classsName=\"map\"\n        center={coords}\n        zoom={zoom}\n        scrollWheelZoom={false}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <SetViewOnClick coords={coords} />\n        <Marker position={coords} />\n\n        {drivers.length > 0 ?\n          drivers.map((v, i) => {\n            return <Marker key={'driver'+i} position={[v.location.latitude,v.location.longitude]} icon={driverIcon} />\n          })\n          : ''}\n\n      </MapContainer>\n\n    </>\n  );\n}\n\nexport default OfficeMap;\n","import { useEffect, useState, } from 'react';\nimport { Row, Col, Card, Slider, Select, Button, Spin,Modal } from 'antd';\nimport OfficeMap from \"./officeMap\"; //Feature an interactive map.\nimport _ from \"lodash\";\nimport axios from \"axios\";\nimport { clear } from 'console';\n\nconst marks = {\n    0: '1',\n    10: '10',\n    20: '20',\n};\nconst defaultLocation = [\n    { locationName: 'Singapore', latitude: 1.285194, longitude: 103.8522982, value: 'sg' },\n    { locationName: 'London', latitude: 51.5049375, longitude: -0.0964509, value: 'uk' },\n]\nconst { Option } = Select;\nlet timeout;\n\nconst FindTaxi = (props) => {\n    const [officeLocation, setOfficeLocation] = useState('sg')\n    const [coords, setCoords] = useState([1.285194, 103.8522982]);\n    const [drivers, setDrivers] = useState([]);\n    const [driverCount, setDriverCount] = useState(4);\n    const [spinLoading, setSpinLoading] = useState(false);\n    const url = \"https://cors-anywhere.herokuapp.com/https://qa-interview-test.splytech.dev/api/drivers\";\n\n    useEffect(() => {\n        //you should choose an appropriate refresh interval for most recent locations of taxis\n        const intervalId = setInterval(() => {\n            getNearByTaxiDriver(coords[0], coords[1], 'abc')\n        }, 10000 * 5) // in milliseconds\n        return () => clearInterval(intervalId)\n    })\n\n    useEffect(() => {\n        function onChangeOfficeLocation() {\n            let foundLocation = _.find(defaultLocation, { 'value': officeLocation });\n            // let driverArray = [] as any;\n            if (_.isEmpty(foundLocation) === false) {\n                setCoords([foundLocation.latitude, foundLocation.longitude]);\n                getNearByTaxiDriver(foundLocation.latitude, foundLocation.longitude, 'efg')\n            }\n        }\n        onChangeOfficeLocation()\n\n    }, [officeLocation])\n\n    function handleChange(value) {\n        setOfficeLocation(value)\n    }\n\n\n    //You should centre the map on the location of the nearest Splyt office to the user’s\n    // current location. There should be the ability to manually switch between the office locations, or return to the nearest.\n    // ○ Singapore: (1.285194, 103.8522982)\n    // ○ London: (51.5049375, -0.0964509)\n\n    function handleChangeNearestOffice() {\n        onChangeNearestOffice()\n    }\n    function handleChangeMyLocation() {\n        setSpinLoading(true)\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(goToMyLocation);\n        }\n    }\n\n    function onChangeNearestOffice() {\n        setSpinLoading(true)\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(goToNearestOffice);\n        }\n    }\n    function goToMyLocation(position) {\n        setCoords([position.coords.latitude, position.coords.longitude]);\n        setSpinLoading(false)\n    }\n\n    function goToNearestOffice(position) {\n        let latitude = position.coords.latitude,\n            longitude = position.coords.longitude\n        let nearestDistance = 0, nearestDistanceValue = ''\n        defaultLocation.map((v) => {\n            let distance = getDistance([latitude, longitude], [v.latitude, v.longitude])\n            if (nearestDistance === 0 || nearestDistance > distance) {\n                nearestDistance = distance\n                nearestDistanceValue = v.value\n            }\n            return v\n        })\n        setOfficeLocation('')\n        setOfficeLocation(nearestDistanceValue)\n\n        setSpinLoading(false)\n    }\n\n    //calculate distance\n    function getDistance(origin, destination) {\n        // return distance in meters\n        var lon1 = toRadian(origin[1]),\n            lat1 = toRadian(origin[0]),\n            lon2 = toRadian(destination[1]),\n            lat2 = toRadian(destination[0]);\n\n        var deltaLat = lat2 - lat1;\n        var deltaLon = lon2 - lon1;\n\n        var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n        var c = 2 * Math.asin(Math.sqrt(a));\n        var EARTH_RADIUS = 6371;\n        return c * EARTH_RADIUS * 1000;\n    }\n    function toRadian(degree) {\n        return degree * Math.PI / 180;\n    }\n\n    //Feature a UI slider, that enables you to change the number of taxis displayed on\n    // the map. You should choose a sensible lower and upper bound for the range.\n    function handleChangeDriverCount(value) {\n        getNearByTaxiDriver(coords[0], coords[1], 'eggg')\n        setDriverCount(value)\n    }\n\n    //The map should show the most recent locations of taxis in the surrounding area     \n    function getNearByTaxiDriver(x, y, where) {\n\n        // return console.log('getNearByTaxiDriver '+where)\n        axios.get('http://localhost:3031/getDriver', {\n            params: {\n                latitude: x,\n                longitude: y,\n                count: driverCount\n            }\n        }).then((res) => {\n            console.log('res')\n            console.log(res)\n            if (res.data.err) {\n                Modal.error({\n                    title: 'This is an error message',\n                    content: res.data.message,\n                  });\n            }\n            else {\n                // setDrivers(res.data.drivers)\n            }\n        }).catch((err) => {\n            console.log('err')\n            console.log(err)\n        })\n\n    }\n\n    return (\n        <div>\n            <Row className='mainBg' gutter={16}  >\n                <Col span={6} offset={6}>\n                    <h1 className='headerText'>Find Taxi</h1>\n                    <Row>Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis deleniti vitae, iusto incidunt exercitationem sint porro, eius tempora harum, quidem accusamus natus hic quam est odio amet quos aspernatur officiis.</Row>\n\n                    <Row gutter={16} className='margin-10px'><h2>Office Location</h2></Row>\n                    <Select defaultValue=\"sg\" value={officeLocation} style={{ width: 120 }} onChange={handleChange}>\n                        {defaultLocation.map((v, i) => {\n                            return <Option key={'location' + i} value={v.value}>{v.locationName}</Option>\n                        })}\n                    </Select>\n\n                    <Row gutter={16} className='margin-10px'><h2>Show no. of Taxi</h2></Row>\n                    <Slider marks={marks} defaultValue={4} min={1} max={20}\n                        // onChange={handleChangeDriverCount}\n                        onChange={(e) => {\n                            clearTimeout(timeout);\n                            timeout = setTimeout(function () {\n                                handleChangeDriverCount(e)\n                            }, 1000);\n\n                        }}\n                    />\n                </Col>\n                <Col span={8}>\n                    <Card title='Search Taxi'>\n                        <Spin spinning={spinLoading}>\n                            <OfficeMap coords={coords} drivers={drivers} />\n                        </Spin>\n\n                        <Button loading={spinLoading} className='margin-10px' onClick={handleChangeNearestOffice}>Back to Nearest Office</Button>\n                        <Button loading={spinLoading} className='margin-10px' onClick={handleChangeMyLocation}>Back to My Current Location</Button>\n                    </Card>\n                </Col>\n            </Row>\n\n        </div>\n    );\n\n}\nexport default (FindTaxi);","import { Component } from \"react\";\nimport { Route, } from \"react-router-dom\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport MainPage from \"./components/mainPage\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n            <Route exact path={[\"/\",  ]} component={MainPage} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}